# MySQL-specific code to create tables for auction server.


# as_currencies contains currencies supported by auction server.
CREATE TABLE as_currencies (
  id         INTEGER,                       # Currency id.
  name       VARCHAR(3)       NOT NULL,     # USD, CAD, NZD, etc.
  PRIMARY KEY (id)
);

# Insert USD as initial currency.
INSERT INTO as_currencies values(1, 'USD');


# as_hubs contains hubs this server can connect to in networked mode.
CREATE TABLE as_hubs (
  uuid           CHAR(36)         NOT NULL,     # Random UUID identifying a hub.
  name           VARCHAR(64)      NOT NULL,     # Hub name.
  uri            VARCHAR(256),                  # URI at which the hub is available.
  PRIMARY KEY (uuid)
);


# as_site contains details about this auction server installation.
CREATE TABLE as_site (
  uuid           CHAR(36)         NOT NULL,     # Random UUID identifying this auction server.
  name           VARCHAR(64)      NOT NULL,     # Name for this site.
  uri            VARCHAR(256),                  # URI at which the server is available to its users.
  hubs           TEXT                           # Comma-separated list of hub uuids to talk to.
);


# as_users contains users registered with this server.
CREATE TABLE as_users (
  uuid       CHAR(36)         NOT NULL,     # Random UUID identifying a specific user.
  login      VARCHAR(32)      NOT NULL,     # User login.
  password   CHAR(32)         NOT NULL,     # Password hash.
  name       VARCHAR(64)      NOT NULL,     # User name.
  email      VARCHAR(64)      NOT NULL,     # User email.
  PRIMARY KEY (login)
);


# as_auctions contains auctions known to this server.
# They may be local or remote, active or closed. One table for all for now to keep things simple.
CREATE TABLE as_auctions (
  uuid                  CHAR(36)     NOT NULL,  # Random UUID of the auction, generated by the site.
  site_uuid             CHAR(36)     NOT NULL,  # Originating site UUID.
  seller_uuid           CHAR(36)     NOT NULL,  # Seller UUID.
  name                  VARCHAR(256) NOT NULL,  # Name of the auction item.
  description           TEXT         NOT NULL,  # Description of the auction item.
  image_uri             VARCHAR(256),           # Image URI.
  created_timestamp     CHAR(19)     NOT NULL,  # Creation timestamp in format like "2016-04-08 15:00:10".
  close_timestamp       CHAR(19)     NOT NULL,  # Close timestamp in format like "2016-04-15 15:00:10".
  currency_id           INTEGER      NOT NULL,  # Currency id.
  reserve_price         NUMERIC(15,2),          # Reserve price of the auction.
  current_price         NUMERIC(15,2),          # Current price of the auction.
  status                INTEGER,                # Status of the auction.
  PRIMARY KEY (uuid)
);
# TODO: add indexes.


# as_bids contains bids known to ths server.
CREATE TABLE as_bids (
  uuid                  CHAR(36)     NOT NULL,   # Random UUID of the bid.
  bid_site_uuid         CHAR(36),                # Site UUID for the bid origin.
  item_uuid             CHAR(36)     NOT NULL,   # UUID of the auction item.
  item_site_uuid        CHAR(36),                # Site UUID for item origin.
  max_price             NUMERIC(15,2),           # Max price of the pid.
  user_uuid             CHAR(36)     NOT NULL,   # User UUID who placed the bid.
  created_timestamp     CHAR(19)     NOT NULL,   # Bid creation timestamp in format like "2016-04-08 15:01:10".
  status                INTEGER,                 # Status of the bid.
  PRIMARY KEY (uuid)
);
# TODO: add indexes.


# as_msgs_in contains messages from network received during previous 24 hours.
# This table is used to filter out redundant messages to process each only once.
CREATE TABLE as_msgs_in (
  uuid                  CHAR(36)     NOT NULL,   # Random UUID iidentifying the message.
  origin_uuid           CHAR(36)     NOT NULL,   # UUID of the server the message is from.
  created_timestamp     CHAR(19)     NOT NULL,   # Creation timestamp in format like "2016-04-08 15:00:10".
  status                INTEGER,                 # Status of the message
  PRIMARY KEY (uuid)
);
# TODO: add index by timestamp.


# as_msgs_out is our message queue for hubs.
# Successfully sent messages are removed from this table.
# Messages not yet sent, or failed to reach at least one hub stay here.
CREATE TABLE as_msgs_out (
  uuid                  CHAR(36)     NOT NULL,   # Random UUID iidentifying the message.
  created_timestamp     CHAR(19)     NOT NULL,   # Creation timestamp in format like "2016-04-08 15:00:10".
  hub_status            TEXT,                    # Comma-separated list of hub_uuid:status pairs.
  next_try_timestamp    CHAR(19)     NOT NULL,   # timestamp when to try to send it out again.
  status                INTEGER,                 # Overall status of the message.
  PRIMARY KEY (uuid)
);
