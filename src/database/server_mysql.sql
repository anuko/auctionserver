# MySQL-specific code to create tables for auction server.


# as_nodes contains nodes this server can connect to in networked mode.
CREATE TABLE as_nodes (
  uuid               CHAR(36)       NOT NULL,   # UUID identifying a node.
  name               VARCHAR(64)    NOT NULL,   # Node name.
  uri                VARCHAR(256),              # URI at which the node is available.
  PRIMARY KEY (uuid)
);


# as_node_details contains details about this node.
CREATE TABLE as_node_details (
  uuid               CHAR(36)       NOT NULL,   # UUID identifying this auction site.
  type               INTEGER,                   # Note type: site, hub, or root hub.
  name               VARCHAR(64)    NOT NULL,   # Name for this site.
  uri                VARCHAR(256),              # URI at which the server is available to its users.
  up_nodes           TEXT                       # Comma-separated list of upstream node uuids to talk to.
);


# as_downstream contains downstream nodes that this node talks with.
CREATE TABLE as_downstream (
  uuid               CHAR(36)     NOT NULL,     # Node UUID.
  type               INTEGER,                   # Node type: site or hub.
  name               VARCHAR(64)  NOT NULL,     # Node name.
  uri                VARCHAR(256) NOT NULL,     # Node URI.
  status             INTEGER,                   # Node status.
  PRIMARY KEY (uuid)
);


# as_users contains users registered with this site.
CREATE TABLE as_users (
  uuid               CHAR(36)       NOT NULL,   # User UUID.
  login              VARCHAR(32)    NOT NULL,   # User login.
  password           CHAR(32)       NOT NULL,   # Password hash.
  name               VARCHAR(64)    NOT NULL,   # User name.
  email              VARCHAR(64)    NOT NULL,   # User email.
  PRIMARY KEY (login)
);


# as_auctions contains auctions known to this site (local and remote).
CREATE TABLE as_auctions (
  uuid               CHAR(36)       NOT NULL,   # UUID of the auction, generated by the site.
  origin             CHAR(36)       NOT NULL,   # Originating node UUID.
  seller_uuid        CHAR(36)       NOT NULL,   # Seller UUID.
  name               VARCHAR(256)   NOT NULL,   # Name of the auction item.
  description        TEXT           NOT NULL,   # Description of the auction item.
  image_uri          VARCHAR(256),              # Image URI.
  created_timestamp  CHAR(19)       NOT NULL,   # Creation timestamp in format like "2016-04-08 15:00:10".
  close_timestamp    CHAR(19)       NOT NULL,   # Close timestamp in format like "2016-04-15 15:00:10".
  currency           CHAR(3)        NOT NULL,   # Currency: USD, CAD, NZD, etc.
  reserve_price      NUMERIC(15,2),             # Reserve price of the auction.
  current_price      NUMERIC(15,2),             # Current price of the auction.
  status             INTEGER,                   # Status of the auction.
  PRIMARY KEY (uuid)
);
# TODO: add indexes.


# as_bids contains bids known to ths server.
CREATE TABLE as_bids (
  uuid               CHAR(36)       NOT NULL,   # UUID of the bid.
  origin             CHAR(36),                  # Site UUID for the bid origin.
  item_uuid          CHAR(36)       NOT NULL,   # UUID of the auction item.
  item_origin        CHAR(36),                  # Site UUID for item origin.
  max_price          NUMERIC(15,2),             # Max price of the pid.
  user_uuid          CHAR(36)       NOT NULL,   # User UUID who placed the bid.
  created_timestamp  CHAR(19)       NOT NULL,   # Bid creation timestamp in format like "2016-04-08 15:01:10".
  status             INTEGER,                   # Status of the bid.
  PRIMARY KEY (uuid)
);
# TODO: add indexes.


# as_msgs_in contains messages from network received during previous 24 hours.
# This table is used to filter out redundant messages to process each only once.
CREATE TABLE as_msgs_in (
  uuid               CHAR(36)       NOT NULL,   # UUID iidentifying the message.
  origin             CHAR(36)       NOT NULL,   # UUID of the node the message is from.
  created_timestamp  CHAR(19)       NOT NULL,   # Creation timestamp in format like "2016-04-08 15:00:10".
  status             INTEGER,                   # Status of the message
  PRIMARY KEY (uuid)
);
# TODO: add index by timestamp.


# as_msgs_out is our outgoing message queue.
# Successfully sent messages are removed from this table.
# Messages not yet sent, or not delivered due to failure stay here for a few retries.
CREATE TABLE as_msgs_out (
  uuid               CHAR(36)       NOT NULL,   # Random UUID iidentifying the message.
  remote             CHAR(36)       NOT NULL,   # UUID of destination hub.
  created_timestamp  CHAR(19)       NOT NULL,   # Creation timestamp in format like "2016-04-08 15:00:10".
  next_try_timestamp CHAR(19)       NOT NULL,   # timestamp when to try to send it out again.
  status             INTEGER,                   # Status of the message.
  PRIMARY KEY (uuid)
);

